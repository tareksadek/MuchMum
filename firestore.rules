rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  	// Function to get user data within security rules
      function getUserData(userId) {
        return get(/databases/$(database)/documents/users/$(userId)).data;
      }

      // Function to check if a user is a member of the team
      // function isTeamMember(userId, teamId) {
      //   let user = getUserData(userId);
      //   return user.batchId == teamId;
      // }

      // Function to check if a user is the master of the team
      function isTeamMaster(userId, teamId) {
        let user = getUserData(userId);
        return user.batchId == teamId && user.isTeamMaster == true;
      }
  
    match /setup/defaultSetup {
      // Anyone can read the document
      allow read: if true;

      // Only users with claim.admin can write to the document
      allow write: if request.auth != null && request.auth.token.admin == true;
    }
    
    match /batches/{batchId} {
      // Allow reading by anyone
      allow read: if true;
      // Allow write only if the user is an admin
      allow create, update, delete, write: if request.auth != null && request.auth.token.admin == true;

      // Rules for the invitations sub-collection
      match /invitations/{invitationId} {
        // Allow reading by anyone
        allow read: if true;
        // Allow write only if the user is logged in
        allow write: if request.auth != null;
        allow delete: if request.auth.token.admin == true;
      }
    }
    
    // User collection rules
    match /users/{userId} {
      allow read: if true; // Everyone can read
      allow create: if request.auth.uid == userId || request.auth.token.admin == true; 
      allow update: if request.auth.uid == userId || request.auth.token.admin == true 
				|| request.resource.data.keys().hasOnly(['visits']);

      // Rstaurant sub-collection rules
      match /restaurants/{restaurantId} {
        allow read;
        allow create;
        allow update: if request.auth.uid == userId || request.auth.token.admin == true
					|| request.resource.data.keys().hasOnly(['visits'])
          || (!('addedToContacts' in resource.data) && request.resource.data.addedToContacts == 1)
          || ('addedToContacts' in resource.data && request.resource.data.addedToContacts == resource.data.addedToContacts + 1);
				
        match /menus/{menuId} {
        	allow create: if request.auth.uid == userId;
          allow read: if true; 
          allow update: if request.auth.uid == userId;
          allow delete: if request.auth.uid == userId;
          
          match /sections/{sectionId} {
        		allow read: if true; // Adjust according to your requirements
        
            match /items/{itemId} {
              allow read: if true; // Adjust according to your requirements
            }
      		}
        }
        
        match /contacts/{contactId} {
        	allow create;
          allow read: if request.auth.uid == userId || request.auth.token.admin == true || isTeamMaster(request.auth.uid, getUserData(userId).batchId);
          allow update: if request.auth.uid == userId || request.auth.token.admin == true;
          allow delete: if request.auth.uid == userId || request.auth.token.admin == true;
        }

        // Links sub-collection under profile
        match /links/{linkId} {
          // Allow anyone to read links
          allow read: if true;

          // Allow the authenticated user to create links
          allow create: if request.auth.uid == userId;

          // Allow updates
          allow update: if (
            request.auth.uid == userId && (!('clicked' in request.resource.data) || request.resource.data.clicked == resource.data.clicked)
            || (!('clicked' in resource.data) && request.resource.data.clicked == 1)
            || ('clicked' in resource.data && request.resource.data.clicked == resource.data.clicked + 1)
          );

          // Allow the authenticated user or an admin to delete links
          allow delete: if request.auth.uid == userId || request.auth.token.admin == true;
        }


        // Visits sub-collection under profile
        match /visits/{visitId} {
          allow read: if true;  // Everyone can read visits
          allow create: if true;  // Everyone can create a visit
          // Assuming you only want the visit's date and device type attributes to be created
          allow update: if false;  // Disallow updates to visits for simplicity
        }

        // ProfileImage sub-collection under profile
        match /profileImage/{imageId} {
          allow read: if true;
          allow create, update: if request.auth.uid == userId || request.auth.token.admin == true;
        }
      }
      
      match /linkClicks/{linkId} {
        allow read: if true; // Everyone can read link clicks
        allow create, update: if !('clicked' in resource.data) && request.resource.data.clicked == 1
              || ('clicked' in resource.data && request.resource.data.clicked == resource.data.clicked + 1);
        allow delete: if false; // Disallow deleting link click records
      }
    }
    
    match /teams/{teamId} {
      // Allow read if the user is a member of the team
      // allow read: if isTeamMember(request.auth.uid, teamId);
      allow read: if true;

      // Allow write if the user is the team master or an admin
      allow write: if isTeamMaster(request.auth.uid, teamId) || request.auth.token.admin == true;
      
      match /links/{linkId} {
        allow read: if true;
        allow create: if isTeamMaster(request.auth.uid, teamId) || request.auth.token.admin == true;
        allow update: if isTeamMaster(request.auth.uid, teamId) || request.auth.token.admin == true 
              || (!('clicked' in resource.data) && request.resource.data.clicked == 1)
              || ('clicked' in resource.data && request.resource.data.clicked == resource.data.clicked + 1);
        allow delete: if isTeamMaster(request.auth.uid, teamId) || request.auth.token.admin == true;
      }
    }
  }
}